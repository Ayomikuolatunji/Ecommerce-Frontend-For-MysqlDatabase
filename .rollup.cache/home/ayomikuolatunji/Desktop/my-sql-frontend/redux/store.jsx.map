{"version":3,"file":"store.jsx","sourceRoot":"","sources":["store.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AACnE,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAC7D,OAAO,EACL,cAAc,EACd,YAAY,EACZ,KAAK,EACL,SAAS,EACT,KAAK,EACL,OAAO,EACP,KAAK,EACL,QAAQ,GACT,MAAM,eAAe,CAAC;AAEvB,OAAO,OAAO,MAAM,2BAA2B,CAAC;AAEhD,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AAEvC,IAAM,aAAa,GAAG;IACpB,GAAG,EAAE,MAAM;IACX,OAAO,SAAA;IACP,SAAS,EAAE,CAAC,MAAM,CAAC;CACpB,CAAC;AAEF,IAAM,WAAW,GAAG,eAAe;IACjC,GAAC,UAAU,CAAC,WAAW,IAAG,UAAU,CAAC,OAAO;QAC5C,CAAC;AAEH,IAAM,gBAAgB,GAAG,cAAc,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;AAEpE,IAAM,KAAK,GAAG,cAAc,CAAC;IAC3B,OAAO,EAAE,gBAAgB;IACzB,UAAU,EAAE,UAAC,oBAAoB;QAC/B,OAAA,oBAAoB,CAAC;YACnB,iBAAiB,EAAE;gBACjB,cAAc,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC;aACpE;SACF,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC;IAJhC,CAIgC;CACnC,CAAC,CAAC;AACH,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAE/B,IAAI,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;AAOpC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC","sourcesContent":["import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { setupListeners } from \"@reduxjs/toolkit/dist/query\";\nimport {\n  persistReducer,\n  persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\nimport storage from \"redux-persist/lib/storage\";\n\nimport { apiService } from \"./service\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"auth\"],\n};\n\nconst rootReducer = combineReducers({\n  [apiService.reducerPath]: apiService.reducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(apiService.middleware),\n});\nsetupListeners(store.dispatch);\n\nlet persistor = persistStore(store);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport { store, persistor };\n"]}